// Code generated by protoc-gen-go. DO NOT EDIT.
// source: RollDice.proto

package rolldice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The client request
type ClientRequest struct {
	Dice                 string   `protobuf:"bytes,1,opt,name=dice,proto3" json:"dice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_RollDice_58bbc79fb8079f73, []int{0}
}
func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRequest.Unmarshal(m, b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
}
func (dst *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(dst, src)
}
func (m *ClientRequest) XXX_Size() int {
	return xxx_messageInfo_ClientRequest.Size(m)
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetDice() string {
	if m != nil {
		return m.Dice
	}
	return ""
}

// The server response
type ServerResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerResponse) Reset()         { *m = ServerResponse{} }
func (m *ServerResponse) String() string { return proto.CompactTextString(m) }
func (*ServerResponse) ProtoMessage()    {}
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_RollDice_58bbc79fb8079f73, []int{1}
}
func (m *ServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerResponse.Unmarshal(m, b)
}
func (m *ServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerResponse.Marshal(b, m, deterministic)
}
func (dst *ServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerResponse.Merge(dst, src)
}
func (m *ServerResponse) XXX_Size() int {
	return xxx_messageInfo_ServerResponse.Size(m)
}
func (m *ServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerResponse proto.InternalMessageInfo

func (m *ServerResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientRequest)(nil), "rolldice.ClientRequest")
	proto.RegisterType((*ServerResponse)(nil), "rolldice.ServerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiceClient is the client API for Dice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiceClient interface {
	// Sends a greeting
	RollDice(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
}

type diceClient struct {
	cc *grpc.ClientConn
}

func NewDiceClient(cc *grpc.ClientConn) DiceClient {
	return &diceClient{cc}
}

func (c *diceClient) RollDice(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/rolldice.Dice/RollDice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiceServer is the server API for Dice service.
type DiceServer interface {
	// Sends a greeting
	RollDice(context.Context, *ClientRequest) (*ServerResponse, error)
}

func RegisterDiceServer(s *grpc.Server, srv DiceServer) {
	s.RegisterService(&_Dice_serviceDesc, srv)
}

func _Dice_RollDice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiceServer).RollDice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rolldice.Dice/RollDice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiceServer).RollDice(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rolldice.Dice",
	HandlerType: (*DiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RollDice",
			Handler:    _Dice_RollDice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RollDice.proto",
}

func init() { proto.RegisterFile("RollDice.proto", fileDescriptor_RollDice_58bbc79fb8079f73) }

var fileDescriptor_RollDice_58bbc79fb8079f73 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x0b, 0xca, 0xcf, 0xc9,
	0x71, 0xc9, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0xca, 0xcf, 0xc9,
	0x49, 0xc9, 0x4c, 0x4e, 0x55, 0x52, 0xe6, 0xe2, 0x75, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x09, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x01, 0x49, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0x81, 0xd9, 0x4a, 0x5a, 0x5c, 0x7c, 0xc1, 0xa9, 0x45, 0x65, 0xa9, 0x45, 0x41, 0xa9,
	0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9,
	0x30, 0x85, 0x30, 0xae, 0x91, 0x3b, 0x17, 0x0b, 0xc8, 0x22, 0x21, 0x7b, 0x2e, 0x0e, 0x98, 0xa5,
	0x42, 0xe2, 0x7a, 0x30, 0xfb, 0xf4, 0x50, 0x2c, 0x93, 0x92, 0x40, 0x48, 0xa0, 0x5a, 0xa0, 0xc4,
	0x90, 0xc4, 0x06, 0x76, 0xaa, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x68, 0x05, 0x55, 0xe8, 0xbc,
	0x00, 0x00, 0x00,
}
